#!/usr/bin/env python
# SPDX-License-Identifier: GPL-3.0

"""
gentoo-mfsa is a simple program to generate bug information for Mozilla's MFSAs to make it
easier to report to Gentoo
"""

__version__ = "0.0.1"
__author__ = "Christopher Fore"
__email__ = "csfore@posteo.net"
__license__ = "GPL-3.0"

import argparse
from datetime import date
from pathlib import Path
import pprint
import re
import sys
import yaml

MFSA_URL = "https://www.mozilla.org/en-US/security/advisories/mfsa{year}-{number}/"

def strip_html(text):
    '''Strips html tags out of MFSA reports'''

    if not isinstance(text, str):
        return text

    clean = re.compile('<.*?>')
    return re.sub(clean, '', text)


def merge_cves(report):
    '''Merges the list of duplicate CVEs and deletes them from their old list'''
    report['All products'] = {}
    report['All products']['cves'] = {}

    seen_cves = set()

    for product in report:
        for cve, desc in report[product].get("cves", {}).items():
            if cve in seen_cves:
                report['All products']["cves"][cve] = desc
            else:
                seen_cves.add(cve)

    for product in list(report):
        if product == 'All products':
            continue
        report[product]['cves'] = {cve: desc for cve, desc in report[product]['cves'].items()
                                   if cve not in report['All products']["cves"]}

    return report


def generate_bug_report(report):
    '''Prints out a bug report'''

    #cves = {}
    for product in report:
        cves = {}
        for cve in report[product]["cves"]:
            if "Android" in report[product]['cves'][cve]:
                continue
            if "Windows" in report[product]['cves'][cve]:
                continue
            cves[cve] = report[product]['cves'][cve]

        print("============================")
        print(product)
        print("============================")
        if len(report[product]["cves"]) == 0:
            print("**No CVEs for solely this Mozilla product**\n")
            continue

        print("Aliases:")
        print(",".join(cves) + "\n")
        #if product != 'All products':
        #    print(f"https://www.mozilla.org/en-US/security/advisories/" \
        #        "mfsa{args.year}-{numbers[0]}/\n")

        for cve, desc in cves.items():
            print(f"{cve}:\n\n{desc}\n")

        if product != 'All products':
            print("\nPlease refer to the tracker for the full list of CVEs that affect all " \
                    "Mozilla products.\n")

    for product in report:
        if product == 'All products':
            continue
        print(f"{product}: {report[product]['url']}")
    print("")
    return cves


def setup_parser():
    '''Setting up our parser using argparse'''
    parser = argparse.ArgumentParser(
            prog="gentoo-mfsa",
            description="Easy script for creating MFSA bugs",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('mfsas', nargs='*')
    parser.add_argument('-y', '--year', type=int, default=date.today().year)
    parser.add_argument('-d', '--dir', type=str, default='./announce')
    parser.add_argument('-D', '--debug', action='store_true')

    return parser


def main():
    '''Main entrypoint'''
    parser = setup_parser()
    args = parser.parse_args()

    if args.debug:
        pp = pprint.PrettyPrinter(indent=4)

    mfsa_path = Path(args.dir) / str(args.year)

    if not mfsa_path.exists():
        raise FileNotFoundError("Invalid MFSA path given: {mfsa_path}")

    mfsa_report = {}

    numbers = args.mfsas

    if numbers == []:
        print("Please provide at least one MFSA number.")
        sys.exit(1)

    for arg in numbers:
        with open(f'{args.dir}/{args.year}/mfsa{args.year}-{arg}.yml',
                  'r', 
                  encoding='utf-8',
                  errors='replace') as mfsa_file:
            mfsa = yaml.safe_load(mfsa_file)
            try:
                fixed_in = mfsa['fixed_in'][0]
                advisories = mfsa['advisories']
                if not fixed_in:
                    raise ValueError(f"Missing 'fixed_in' entry in MFSA data: {arg}")
            except KeyError as e:
                print(f"Error: Missing expected key {e} in {arg}")
                continue
            mfsa_report[fixed_in] = {}
            mfsa_report[fixed_in]["cves"] = {}
            mfsa_report[fixed_in]['url'] = MFSA_URL.format(year=args.year, number=arg)

            advisories = mfsa['advisories']

            for cve in advisories:
                cve_description = strip_html(advisories[cve]['description'])

                mfsa_report[fixed_in]["cves"][cve] = cve_description
                if args.debug:
                    pp.pprint(f"{cve},{advisories[cve]['description']}")


    clean_mfsa_report = merge_cves(mfsa_report)
    if args.debug:
        pp.pprint("\n[DEBUG] Processed MFSA data for")
        pp.pprint(clean_mfsa_report)

    generate_bug_report(clean_mfsa_report)
    mfsas = [f'MFSA{args.year}-{number}' for number in numbers]

    print("MFSA Aliases:")
    print(",".join(mfsas))
    print("======================")
    print("Bug details")
    print("======================")
    print("URL:")
    print(f"https://www.mozilla.org/en-US/security/advisories/mfsa{args.year}-{numbers[0]}/\n")
    print("MFSA report generated!")
    print("Copy the CVE and descriptions below the product and report them in"\
          "their appropiate bugs.")
    print("Please put the all product CVEs in the tracker.")


if __name__ == "__main__":
    main()
